from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from aiogram import Router, F
from aiogram.filters import Command
from aiogram import types

import keyboards.technicKeyboard, keyboards.adminKeyboards
from keyboards import regKeyboards, playerKeyboards, sellerKeyboards, adminKeyboards

import __main__

adminRouter = Router()

class Sellticket_admin(StatesGroup):
    id_game = State()
    id_player = State()
    confirm = State()

class Change_status_admin(StatesGroup):
    ticket_id = State()
    confirm = State()

class set_points_admin(StatesGroup):
    user_id = State()
    points = State()

@adminRouter.message(F.text == "AdM1n")
async def get_admin_panel(message: types.Message):
    if message.from_user.username == "jojiiikol":
        await message.answer(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≥–æ—Å–ø–æ–¥–∏–Ω", reply_markup=keyboards.adminKeyboards.get_admin_keyboard().as_markup(resize_keyboard=True))
    else:
        pass
@adminRouter.message(F.text == "–ó–∞—á–∏—Å–ª–∏—Ç—å –æ—á–∫–∏")
async def set_points(message: types.Message, state: FSMContext):
    if message.from_user.username == "jojiiikol":
        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞")
        await state.set_state(set_points_admin.user_id)
    else:
        await message.answer(text="403")

@adminRouter.message(set_points_admin.user_id)
async def update_points(message: types.Message, state:FSMContext):
    await state.update_data(user_id=message.text)
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤")
    await state.set_state(set_points_admin.points)

@adminRouter.message(set_points_admin.points)
async def add_points(message: types.Message, state:FSMContext):
    await state.update_data(points=message.text)
    data = await state.get_data()
    points = await __main__.db.get_user_points(data['user_id'])
    await __main__.db.set_points_to_user(data['user_id'], points, data['points'])
    await state.clear()



@adminRouter.message(F.text == "–í–µ—Å—å —Ä–µ–π—Ç–∏–Ω–≥")
async def get_raiting(message: types.Message):
    if message.from_user.username == "jojiiikol":
        raiting = await __main__.db.get_raiting()
        raiting_text = ""
        for i, people in enumerate(raiting, 1):
            raiting_text += f"–ú–µ—Å—Ç–æ: {i}, –ù–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞: {people[0]}, –ò–º—è –§–∞–º–∏–ª–∏—è: {people[1], people[2]}, –û—á–∫–∏: {people[3]}\n"
        await message.answer(text=raiting_text)
    else:
        await message.answer(text="403")

@adminRouter.message(F.text == "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±–∏–ª–µ—Ç—ã")
async def show_tickets(message: types.Message, state: FSMContext):
    if message.from_user.username == "jojiiikol":
        list_tickets = await __main__.db.get_all_tickets()
        keyboard = keyboards.adminKeyboards.get_list_tickets_for_change(list_tickets)
        await message.answer(text="–í—ã–±–µ—Ä–∏ –±–∏–ª–µ—Ç: ", reply_markup=keyboard.as_markup())
        await state.set_state(Change_status_admin.ticket_id)
    else:
        await message.answer(text="–¢–µ–±–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ —Ç—É—Ç –±—ã—Ç—å >:(")

@adminRouter.callback_query(Change_status_admin.ticket_id, F.data.contains("change_status_tic"))
async def confirm_change_status(callback: types.CallbackQuery, state: FSMContext):
    ticket_id = callback.data.split("_")[3]
    user_id = callback.data.split("_")[6]
    await state.update_data(ticket_id=f"{ticket_id}")
    await state.update_data(user_id=f"{user_id}")
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer(text=f"–ë–∏–ª–µ—Ç <b>‚Ññ{ticket_id}</b>", reply_markup=keyboards.technicKeyboard.set_confirm_keyboard().as_markup())
    await state.set_state(Change_status_admin.confirm)

@adminRouter.callback_query(Change_status_admin.confirm, F.data.contains("change_status_"))
async def change_status_ticket(callback: types.CallbackQuery, state: FSMContext):
    status = callback.data.split("_")[2]
    data = await state.get_data()
    if status == "ok":
        await callback.answer()
        await callback.message.edit_text(text=f"–ë–∏–ª–µ—Ç <b>‚Ññ{data['ticket_id']}</b>\n---------\n–ò–°–ü–û–õ–¨–ó–û–í–ê–ù")
        await __main__.db.set_false_ticket(ticket_id=data['ticket_id'])
        await state.clear()
    if status == "cancel":
        await callback.answer()
        await callback.message.edit_text(text=f"–ë–∏–ª–µ—Ç <b>‚Ññ{data['ticket_id']}</b>\n---------\n–û–¢–ú–ï–ù–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø")
        await state.clear()

@adminRouter.message(F.text=="–í—ã–¥–∞—Ç—å –±–∏–ª–µ—Ç")
async def get_ticket(message: types.Message, state: FSMContext):
    if message.from_user.username == "jojiiikol":
        await message.answer(text="–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–¥–∞—Ç—å",
                             reply_markup=sellerKeyboards.get_game_type().as_markup())
        await state.set_state(Sellticket_admin.id_game)
    else:
        await message.answer(text="–¢–µ–±–µ —Ç—É—Ç –Ω–µ –º–µ—Å—Ç–æ")



# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–≥—Ä—ã –≤ –ø–∞–º—è—Ç–∏
# –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–≥—Ä–æ–∫–∞
@adminRouter.callback_query(Sellticket_admin.id_game, F.data.contains("sell_game"))
async def choise_game(callback: types.CallbackQuery, state: FSMContext):
    choice = callback.data.split("_")
    await callback.answer()
    await callback.message.delete()
    await state.update_data(game_id=choice[2])
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É: {choice[2]}, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞")
    await state.set_state(Sellticket_admin.id_player)


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —é–∑–µ—Ä–∞ –±–∏–ª–µ—Ç—É
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —é–∑–µ—Ä–∞
@adminRouter.message(Sellticket_admin.id_player)
async def set_player(message: types.Message, state: FSMContext):
    if message.text.isnumeric():
        person = await __main__.db.check_person(user_id=message.text)
        if person:
            await state.update_data(id_player=message.text)
            data = await state.get_data()
            await message.answer(
                text=f"–ë–∏–ª–µ—Ç –Ω–∞ –∏–≥—Ä—É: <b>{data['game_id']}</b>\n–ò–≥—Ä–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º: <b>{data['id_player']}</b>",
                reply_markup=sellerKeyboards.set_confirm_keyboard().as_markup())
            await state.set_state(Sellticket_admin.confirm)
        else:
            await message.answer(text="–ò–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –µ—â–µ —Ä–∞–∑")
    else:
        await message.answer(text="–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –µ—â–µ —Ä–∞–∑")


# –ó–∞–ø–∏—Å—å –±–∏–ª–µ—Ç–∞ –≤ –±–¥
@adminRouter.callback_query(Sellticket_admin.confirm, F.data.contains("sell_status"))
async def sell_ticket(callback: types.CallbackQuery, state: FSMContext):
    choice = callback.data.split("_")
    data = await state.get_data()
    if choice[2] == "ok":
        await callback.answer()
        await callback.message.edit_text(
            text=f"–ë–∏–ª–µ—Ç –Ω–∞ –∏–≥—Ä—É: <b>{data['game_id']}</b>\n–ò–≥—Ä–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º: <b>{data['id_player']}</b>\n-------------\nüí∏–ü–†–û–î–ê–ù–ûüí∏")
        game_id = data['game_id']
        user_id = data['id_player']
        await __main__.db.add_new_ticket(game_id=game_id, user_id=user_id)
        await state.clear()
    if choice[2] == "cancel":
        await callback.answer()
        await callback.message.edit_text(
            text=f"–ë–∏–ª–µ—Ç –Ω–∞ –∏–≥—Ä—É: <b>{data['game_id']}</b>\n–ò–≥—Ä–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º: <b>{data['id_player']}</b>\n-------------\n‚ùå–û–¢–ú–ï–ù–ï–ù–û‚ùå")
        await state.clear()



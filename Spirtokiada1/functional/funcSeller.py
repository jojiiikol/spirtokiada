from aiogram import Router, F
from aiogram import types

from keyboards import sellerKeyboards
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import __main__


class Sellticket(StatesGroup):
    id_game = State()
    id_player = State()
    confirm = State()


routerSeller = Router()

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç FSM –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–∞
# –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —é–∑–µ—Ä - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫?
@routerSeller.message(F.text == "–ü—Ä–æ–¥–∞—Ç—å –±–∏–ª–µ—Çüíµ")
async def get_list_game(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    employee = await __main__.db.check_employee(tg_id=user_id)
    if employee:
        await message.answer(text="–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–¥–∞—Ç—å",
                             reply_markup=sellerKeyboards.get_game_type().as_markup())
        await state.set_state(Sellticket.id_game)
    else:
        await message.answer(text="–ß—É–≤–∞—á–æ–∫, —É —Ç–µ–±—è –±—É–¥—É—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ãüë∫")


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–≥—Ä—ã –≤ –ø–∞–º—è—Ç–∏
# –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–≥—Ä–æ–∫–∞
@routerSeller.callback_query(Sellticket.id_game, F.data.contains("sell_game"))
async def choise_game(callback: types.CallbackQuery, state: FSMContext):
    choice = callback.data.split("_")
    await callback.answer()
    await callback.message.delete()
    await state.update_data(game_id=choice[2])
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É: {choice[2]}, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞")
    await state.set_state(Sellticket.id_player)


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —é–∑–µ—Ä–∞ –±–∏–ª–µ—Ç—É
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —é–∑–µ—Ä–∞
@routerSeller.message(Sellticket.id_player)
async def set_player(message: types.Message, state: FSMContext):
    if message.text.isnumeric():
        person = await __main__.db.check_person(user_id=message.text)
        if person:
            await state.update_data(id_player=message.text)
            data = await state.get_data()
            await message.answer(
                text=f"–ë–∏–ª–µ—Ç –Ω–∞ –∏–≥—Ä—É: <b>{data['game_id']}</b>\n–ò–≥—Ä–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º: <b>{data['id_player']}</b>",
                reply_markup=sellerKeyboards.set_confirm_keyboard().as_markup())
            await state.set_state(Sellticket.confirm)
        else:
            await message.answer(text="–ò–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –µ—â–µ —Ä–∞–∑")
    else:
        await message.answer(text="–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –µ—â–µ —Ä–∞–∑")


# –ó–∞–ø–∏—Å—å –±–∏–ª–µ—Ç–∞ –≤ –±–¥
@routerSeller.callback_query(Sellticket.confirm, F.data.contains("sell_status"))
async def sell_ticket(callback: types.CallbackQuery, state: FSMContext):
    choice = callback.data.split("_")
    data = await state.get_data()
    if choice[2] == "ok":
        await callback.answer()
        await callback.message.edit_text(
            text=f"–ë–∏–ª–µ—Ç –Ω–∞ –∏–≥—Ä—É: <b>{data['game_id']}</b>\n–ò–≥—Ä–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º: <b>{data['id_player']}</b>\n-------------\nüí∏–ü–†–û–î–ê–ù–ûüí∏")
        game_id = data['game_id']
        user_id = data['id_player']
        await __main__.db.add_new_ticket(game_id=game_id, user_id=user_id)
        await state.clear()
    if choice[2] == "cancel":
        await callback.answer()
        await callback.message.edit_text(
            text=f"–ë–∏–ª–µ—Ç –Ω–∞ –∏–≥—Ä—É: <b>{data['game_id']}</b>\n–ò–≥—Ä–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º: <b>{data['id_player']}</b>\n-------------\n‚ùå–û–¢–ú–ï–ù–ï–ù–û‚ùå")
        await state.clear()

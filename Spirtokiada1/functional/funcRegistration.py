from aiogram import Router, F
from aiogram.filters import Command
from aiogram import types

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

import keyboards.technicKeyboard
from keyboards import regKeyboards, playerKeyboards, sellerKeyboards

import __main__

routerRegistartion = Router()


class Registration(StatesGroup):
    set_firstName = State()
    set_lastName = State()
    set_employee = State()
    get_password = State()


class SetTechnic(StatesGroup):
    set_zone = State()


@routerRegistartion.message(Command("reg"))
async def command_reg(message: types.Message, state: FSMContext):
    __main__.db.cursor.execute(f"""SELECT * FROM users WHERE tg_id = {message.from_user.id}""")
    user = __main__.db.cursor.fetchone()
    if user:
        await message.answer(text="–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ :D")
    else:
        await message.answer(text="–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è: ")
        await state.set_state(Registration.set_firstName)


@routerRegistartion.message(Registration.set_firstName)
async def set_firstname(message: types.Message, state: FSMContext):
    await state.update_data(firstName=message.text)
    await message.answer(text="–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é: ")
    await state.set_state(Registration.set_lastName)


@routerRegistartion.message(Registration.set_lastName)
async def set_lastname(message: types.Message, state: FSMContext):
    await state.update_data(lastName=message.text)
    await state.update_data(nickname=message.from_user.username)
    await state.update_data(tg_id=message.from_user.id)
    await state.update_data(chat_id=message.chat.id)
    await message.answer(text="–ö—Ç–æ —Ç—ã, –≤–æ–∏–Ω?", reply_markup=regKeyboards.get_reg_keyboard().as_markup())
    await state.set_state(Registration.set_employee)


@routerRegistartion.callback_query(Registration.set_employee, F.data.contains("role_"))
async def end_regisration(callback: types.CallbackQuery, state: FSMContext):
    role = callback.data.split("_")
    if role[1] == "player":
        await callback.answer()
        await callback.message.delete()
        await state.update_data(employee="FALSE")
        user_data = await state.get_data()
        await __main__.db.create_player(nickname=user_data['nickname'], first_name=user_data['firstName'],
                                        last_name=user_data['lastName'], employee=False, tg_id=user_data['tg_id'],
                                        chat_id=user_data['chat_id'])

        user_id = await __main__.db.get_user_id(callback.from_user.id)
        await callback.message.answer(
            text=f"–°–ø–∞—Å–∏–±–æ!\n–í–∞—à–µ –∏–º—è: {user_data['firstName']} \n–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è: {user_data['lastName']} \n–í–∞—à –Ω–æ–º–µ—Ä: <b>{user_id}</b>")
        await callback.message.answer(text="–ü—Ä–æ—à—É –∑–∞–∫—Ä–µ–ø–∏—Ç—å –≤–µ—Ä—Ö–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä!",
                                      reply_markup=playerKeyboards.get_start_keyboard().as_markup(
                                          resize_keyboard=True,
                                          input_field_placeholder="–ù–∞—á–∏–Ω–∞–π, —á–µ–≥–æ —Ç—ã –∂–¥–µ—à—å?"))
        await state.clear()

    if role[1] == "organization":
        await callback.answer()
        await callback.message.delete()
        await callback.message.answer(text="–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å: ")
        await state.set_state(Registration.get_password)


@routerRegistartion.message(Registration.get_password)
async def get_pass(message: types.Message, state: FSMContext):
    if message.text == "12345":
        await state.update_data(employee="TRUE")
        user_data = await state.get_data()
        await __main__.db.create_player(nickname=message.from_user.username, first_name=user_data['firstName'],
                                        last_name=user_data['lastName'], employee=True, tg_id=message.from_user.id,
                                        chat_id=message.chat.id)

        user_id = await __main__.db.get_user_id(message.from_user.id)
        await message.answer(
            text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∫–æ–ª–ª–µ–≥–∞!\n–í–∞—à–µ –∏–º—è: {user_data['firstName']} \n–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è: {user_data['lastName']} \n–í–∞—à –Ω–æ–º–µ—Ä: <b>{user_id}</b>")
        await state.clear()
        await message.answer(text="–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å", reply_markup=regKeyboards.get_org_keyboard().as_markup())
    else:
        await message.answer(
            text="–¢—ã –æ—à–∏–±—Å—è –ø–æ—Ö–æ–¥—É, –∏–≥—Ä–æ–∫ :)\n–°–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É <b>/reg</b> –∏ –±–æ–ª—å—à–µ –Ω–µ –±–∞–ª–ª—É–π—Å—è!üë∫")
        await state.clear()


@routerRegistartion.callback_query(F.data.contains("org_"))
async def get_org_role(callback: types.CallbackQuery, state: FSMContext):
    role = callback.data.split("_")
    if role[1] == "seller":
        await callback.answer()
        await callback.message.delete()
        await callback.message.answer(text="""–¢–≤–æ—è —Ü–µ–ª—å - –ø—Ä–æ–¥–∞–≤–∞—Ç—å –±–∏–ª–µ—Ç—ã
        –ö–∞–∫ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?
        
        –¢—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å —É —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –∫–∞–∫—É—é –∏–≥—Ä—É –æ–Ω —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—à—å –æ–ø–ª–∞—Ç—É –∏ –¥–∞–ª–µ–µ —Ç—ã–∫–∞–µ—à—å –ø–æ –∫–Ω–æ–ø–∫–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–≥—Ä—ã.
        –ü–æ—Ç–æ–º —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞(—Å–ø—Ä–æ—Å–∏ –ø—Ä–æ –Ω–æ–º–µ—Ä —É –∏–≥—Ä–æ–∫–∞).
        –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—à–ª–æ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º - –ø–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø—Ä–æ–¥–∞–ª –±–∏–ª–µ—Ç!
            –ï—Å–ª–∏ —Ç—ã –≥–¥–µ-—Ç–æ –æ—à–∏–±—Å—è, –∂–º—è–∫–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É" –∏ —Å–¥–µ–ª–∞–π –≤—Å–µ –∑–∞–Ω–æ–≤–æ, —Ç–æ–ª—å–∫–æ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –Ω–µ —Ç—Ä—è—Å–∏ –¥–µ–Ω—å–≥–∏ —É –∏–≥—Ä–æ–∫–∞ :)""",
                                      reply_markup=sellerKeyboards.get_selling_ticket().as_markup(resize_keyboard=True,
                                                                                                  input_field_placeholder="–£–¥–∞—á–∏ –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö!"))
    if role[1] == "technic":
        await callback.answer()
        await callback.message.delete()
        await state.set_state(SetTechnic.set_zone)
        await callback.message.answer(text="–í—ã–±–µ—Ä–∏ –∏–≥—Ä–æ–≤—É—é –∑–æ–Ω—É",
                                      reply_markup=regKeyboards.get_technic_keyboard().as_markup())



@routerRegistartion.callback_query(SetTechnic.set_zone, F.data.contains("set_zone_"))
async def set_zone(callback: types.CallbackQuery, state: FSMContext):
    zone = callback.data.split("_")[2]
    await callback.answer()
    await callback.message.delete()
    await state.update_data(zone=zone)
    data = await state.get_data()
    user_id = await __main__.db.get_user_id(tg_id=callback.from_user.id)

    await __main__.db.set_zone_technic(user_id=user_id, game_id=data["zone"])
    await callback.message.answer(
        text="–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–ª–µ–¥–∏—Ç—å –∑–∞ –±–∏–ª–µ—Ç–∞–º–∏ –∏ –æ–±–Ω—É–ª—è—Ç—å –∏—Ö\n–ö–∞–∫ —ç—Ç–æ –¥–µ–ª–∞—Ç—å?\n–ö —Ç–µ–±–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫ –∏ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –∫—É–ø–∏–ª –±–∏–ª–µ—Ç –Ω–∞ —Ç–≤–æ—é –∏–≥—Ä—É\n–¢—ã –∂–∞–º–∫–∞–µ—à—å –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω --> –ò—â–µ—à—å –µ–≥–æ –±–∏–ª–µ—Ç —É —Å–µ–±—è --> –ù–∞–∂–∏–º–∞–µ—à—å –Ω–∞ –±–∏–ª–µ—Ç –∏ –æ–±–Ω—É–ª—è–µ—à—å –µ–≥–æ --> –ò–≥—Ä–æ–∫ –∏–≥—Ä–∞–µ—Ç - –∏–≥—Ä–æ–∫ —Å—á–∞—Å—Ç–ª–∏–≤\n\n–ï—Å–ª–∏ –±–∏–ª–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞ —É —Ç–µ–±—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ - –ø–æ–ø—Ä–æ—Å–∏ –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Ç—ã–∫–Ω–∏ —É –Ω–µ–≥–æ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ë–∏–ª–µ—Ç—ã': \n\t\t\t\t–ï—Å–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –±–∏–ª–µ—Ç–∞ –Ω–∞ —Ç–≤–æ—é –∏–≥—Ä—É, —Ç–æ –æ–Ω –º–æ—à–µ–Ω–Ω–∏–∫ –∏ —Å–º–µ–ª–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π –µ–≥–æ –Ω–∞ –∫–∞—Å—Å—É\n\t\t\t\t–ï—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –±–∏–ª–µ—Ç, —Ç–æ –ø–∏—à–∏ @jojiiikol –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã, –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞",
        reply_markup=keyboards.technicKeyboard.get_main_keyboard().as_markup(resize_keyboard=True,
                                                                             input_field_placeholder="–ñ–∞–º–∫–∞–π —á–∞—â–µ! :)"))
    await state.clear()
